[build-system]
requires = ["hatchling", "hatch-nodejs-version"]
build-backend = "hatchling.build"

[project]
name = "lexical-loro"
readme = "README.md"
license = { text = "MIT" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Text Processing :: Markup",
]
requires-python = ">=3.8"
dependencies = [
    "websockets>=12.0",
    "click>=8.0.0",
    "loro>=1.6.0",
    "mcp>=1.10.1",
    "uvicorn>=0.23.1",
    "starlette>=0.27",
]
dynamic = ["version", "description", "authors", "keywords"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]
test = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/datalayer/lexical-loro"
Documentation = "https://github.com/datalayer/lexical-loro#readme"
Repository = "https://github.com/datalayer/lexical-loro.git"
Issues = "https://github.com/datalayer/lexical-loro/issues"

[project.scripts]
lexical-loro-server = "lexical_loro.cli:main"
lexical-loro-mcp-server = "lexical_loro.mcp:main"

[tool.hatch.version]
source = "nodejs"

[tool.hatch.build.hooks.version]
path = "lexical_loro/__version__.py"

[tool.hatch.build.targets.wheel]
packages = ["lexical_loro"]

[tool.hatch.build.targets.sdist]
include = [
    "lexical_loro/",
    "README.md",
    "LICENSE",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q"
testpaths = [
    "lexical_loro/tests",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["lexical_loro"]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "node_modules/*",
    "build/*",
    "dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
  | node_modules
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_unimported = true
